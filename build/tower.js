(()=>{"use strict";function t(t){return Number.isInteger(t)||"bigint"==typeof t}class e{}class n extends e{constructor(t){super(),this.num=t}isFinite(){return Number.isFinite(this.num)}isInexact(){return!0}isExact(){return!1}isInteger(){return Number.isInteger(this.num)}toInexact(){return this}toExact(){let t=this.num.toString().match(/^(.*)\.(.*)$/);if(t){parseInt(t[1]),parseInt(t[2]);let e=Math.pow(10,t[2].length);return i.makeInstance(Math.round(this.num*e),e)}return i.makeInstance(this.num,1)}toFixnum(){return Math.floor(this.num)}toString(){return this.num.toString()}toSignedString(){return this.num>=0?"+"+this.num.toString():this.num.toString()}greaterThan(t){return t instanceof i?this.toExact().greaterThan(t):this.num>t.num}greaterThanOrEqual(t){return t instanceof i?this.toExact().greaterThanOrEqual(t):this.num>=t.num}lessThan(t){return t instanceof i?this.toExact().lessThan(t):this.num<t.num}lessThanOrEqual(t){return t instanceof i?this.toExact().lessThanOrEqual(t):this.num<=t.num}equals(t){return t instanceof i?this.toExact().equals(t):this.num===t.num}isZero(){return 0===this.num}isPositive(){return this.num>0}isNegative(){return this.num<0}add(t){return t instanceof i?this.add(t.toInexact()):new n(this.num+t.num)}subtract(t){return t instanceof i?this.subtract(t.toInexact()):new n(this.num-t.num)}multiply(t){return t instanceof i?this.multiply(t.toInexact()):new n(this.num*t.num)}divide(t){return t instanceof i?this.divide(t.toInexact()):new n(this.num/t.num)}numerator(){return this.toExact().numerator()}denominator(){return this.toExact().denominator()}integerSqrt(){return new n(Math.floor(Math.sqrt(this.num)))}sqrt(){return new n(Math.sqrt(this.num))}abs(){return new n(Math.abs(this.num))}floor(){return new n(Math.floor(this.num))}ceiling(){return new n(Math.ceil(this.num))}round(){return new n(Math.round(this.num))}log(){return new n(Math.log(this.num))}expt(t){return t instanceof i?this.expt(t.toInexact()):new n(Math.pow(this.num,t.num))}exp(){return new n(Math.exp(this.num))}angle(){return 0===this.num||this.num>0?h:new n(Math.PI)}atan(){return new n(Math.atan(this.num))}cos(){return new n(Math.cos(this.num))}sin(){return new n(Math.sin(this.num))}acos(){return new n(Math.acos(this.num))}asin(){return new n(Math.asin(this.num))}}class i extends e{static makeInstance(t,e){if("bigint"==typeof t&&"bigint"==typeof e)return new u(t,e);if("number"==typeof t&&"number"==typeof e)return new a(t,e);throw new TypeError(`Numberator and denominator types must match, given ${typeof t} and ${typeof e}`)}}function r(t){return t>Number.MAX_SAFE_INTEGER||t<Number.MIN_SAFE_INTEGER}function s(t){let e=BigInt(Number.MAX_SAFE_INTEGER),n=BigInt(Number.MIN_SAFE_INTEGER);return t<e&&t>n}class a extends i{constructor(t,e=1){if(super(),!Number.isInteger(t)&&!Number.isInteger(e))throw new TypeError("Exact number can only be constructed from integers.");if("number"!=typeof t||"number"!=typeof e)throw new TypeError("Exact value numerator and denominator types must match");{e<0&&(t*=-1,e*=-1);let n=this.gcd(t,e);this.num=t/n,this.den=e/n}}gcd(t,e){let n;for(;0!==e;)n=t,t=e,e=n%e;return t}isFinite(){return!0}isInexact(){return!1}isExact(){return!0}isInteger(){return 1===this.den}toInexact(){let t=this.num/this.den;return new n(t)}toExact(){return this}toBigExact(){return new u(BigInt(this.num),BigInt(this.den))}toFixnum(){return Math.floor(this.num/this.den)}toString(){let t=Math.abs(this.num).toString(),e=Math.abs(this.den).toString();return this.isPositive()||this.isZero()?`${t}/${e}`:`-${t}/${e}`}toSignedString(){return this.isPositive()||this.isZero()?"+"+this.toString():this.toString()}greaterThan(t){return t instanceof n?this.toInexact().greaterThan(t):t instanceof u?this.toBigExact().greaterThan(t):this.num*t.den>this.den*t.den}greaterThanOrEqual(t){return t instanceof n?this.toInexact().greaterThanOrEqual(t):t instanceof u?this.toBigExact().greaterThanOrEqual(t):this.num*t.den>=this.den*t.den}lessThan(t){return t instanceof n?this.toInexact().lessThan(t):t instanceof u?this.toBigExact().lessThan(t):this.num*t.den<this.den*t.den}lessThanOrEqual(t){return t instanceof n?this.toInexact().lessThanOrEqual(t):t instanceof u?this.toBigExact().lessThanOrEqual(t):this.num*t.den<=this.den*t.den}equals(t){return t instanceof n?this.toInexact().equals(t):t instanceof u?this.toBigExact().equals(t):this.num*t.den==this.den*t.den}isZero(){return 0===this.num}isPositive(){return this.num>0}isNegative(){return this.num<0}add(t){if(t instanceof n)return this.toInexact().add(t);if(t instanceof u)return this.toBigExact().add(t);if(t instanceof a){let e=this.num*t.den+t.num*this.den,n=this.den*t.den;return r(e)||r(n)?this.toBigExact().add(t.toBigExact()):new a(e,n)}throw new Error(`Cannot add ${this} to value ${t}`)}subtract(t){if(t instanceof n)return this.toInexact().subtract(t);if(t instanceof u)return this.toBigExact().subtract(t);if(t instanceof a){let e=this.num*t.den-t.num*this.den,n=this.den*t.den;return r(e)||r(n)?this.toBigExact().subtract(t.toBigExact()):new a(e,n)}throw new Error(`Cannot subtract ${this} and ${t}`)}multiply(t){if(t instanceof n)return this.toInexact().multiply(t);if(t instanceof u)return this.toBigExact().multiply(t);if(t instanceof a){let e=this.num*t.num,n=this.den*t.den;return r(e)||r(n)?this.toBigExact().multiply(t.toBigExact()):new a(e,n)}throw new Error(`Cannot multiply ${this} and ${t}`)}divide(t){if(t instanceof n)return this.toInexact().multiply(t);if(t instanceof u)return this.toBigExact().multiply(t);if(t.isZero())throw new Error("/: division by zero"+this+t);if(t instanceof a){let e=this.num*t.den,n=this.den*t.num;return r(e)||r(n)?this.toBigExact().divide(t.toBigExact()):new a(e,n)}throw new Error(`Cannot divide ${this} and ${t}`)}numerator(){return new a(this.num)}denominator(){return new a(this.den)}integerSqrt(){return this.sqrt().floor()}sqrt(){if(this.isNegative())throw new Error("Cannot take square root of negative number "+this);let t=Math.sqrt(this.num),e=Math.sqrt(this.den);return t===Math.floor(t)&&e===Math.floor(e)?new a(t,e):new n(t/e)}abs(){return this.isNegative()?new a(-1*this.num,this.den):this}floor(){return 1===this.den?this:new a(Math.floor(this.num/this.den))}ceiling(){return 1===this.den?this:new a(Math.ceil(this.num/this.den))}round(){return 1===this.den?this:new a(Math.round(this.num/this.den))}log(){return new n(Math.log(this.num/this.den))}expt(t){if((t=t.toInexact()).isInteger()){let e=t.num,n=Math.pow(this.num,e),i=Math.pow(this.den,e);return r(n)||r(i)?this.toBigExact().expt(t):new a(n,i)}return this.toInexact().expt(t)}exp(){return new n(Math.exp(this.num/this.den))}angle(){return this.isNegative()?new n(Math.PI):new a(0)}atan(){return new n(Math.atan(this.num/this.den))}cos(){return new n(Math.cos(this.num/this.den))}sin(){return new n(Math.sin(this.num/this.den))}acos(){return new n(Math.acos(this.num/this.den))}asin(){return new n(Math.asin(this.num/this.den))}}class u extends i{constructor(t,e=1n){if(super(),"bigint"!=typeof t||"bigint"!=typeof e)throw new TypeError("Exact value numerator and denominator types must match");{e<0&&(t*=-1n,e*=-1n);let n=this.gcd(t,e);this.num=t/n,this.den=e/n}}gcd(t,e){let n;for(;0n!==e;)n=t,t=e,e=n%e;return t}bigintAbs(t){return t<0n?-1n*t:t}isFinite(){return!0}isInexact(){return!1}isExact(){return!0}isInteger(){return 1n===this.den}toInexact(){let t=Number(this.num)/Number(this.den);return new n(t)}toExact(){return this}toSmallExact(){return new a(Number(this.num),Number(this.den))}toFixnum(){return this.toInexact().toFixnum()}toString(){return`${this.bigintAbs(this.num).toString().slice(0,-1)}/${this.bigintAbs(this.den).toString().slice(0,-1)}`}toSignedString(){return this.isNegative()?this.toString():"+"+this.toString()}greaterThan(t){if(t instanceof n)return this.toInexact().greaterThan(t);if(t instanceof a)return this.greaterThan(t.toBigExact());if(t instanceof u)return this.num*t.den>this.den*t.den;throw new Error(`Cannot compare ${this} and ${t}`)}greaterThanOrEqual(t){if(t instanceof n)return this.toInexact().greaterThanOrEqual(t);if(t instanceof a)return this.greaterThanOrEqual(t.toBigExact());if(t instanceof u)return this.num*t.den>=this.den*t.den;throw new Error(`Cannot compare ${this} and ${t}`)}lessThan(t){if(t instanceof n)return this.toInexact().lessThan(t);if(t instanceof a)return this.lessThan(t.toBigExact());if(t instanceof u)return this.num*t.den<this.den*t.den;throw new Error(`Cannot compare ${this} and ${t}`)}lessThanOrEqual(t){if(t instanceof n)return this.toInexact().lessThanOrEqual(t);if(t instanceof a)return this.lessThanOrEqual(t.toBigExact());if(t instanceof u)return this.num*t.den<=this.den*t.den;throw new Error(`Cannot compare ${this} and ${t}`)}equals(t){if(t instanceof n)return this.toInexact().equals(t);if(t instanceof a)return this.equals(t.toBigExact());if(t instanceof u)return this.num*t.den==this.den*t.den;throw new Error(`Cannot compare ${this} and ${t}`)}isZero(){return 0n===this.num}isPositive(){return this.num>0n}isNegative(){return this.num<0n}add(t){if(t instanceof n)return this.toInexact().add(t);if(t instanceof a)return this.add(t.toBigExact());if(t instanceof u){let e=this.num*t.den+t.num*this.den,n=this.den*t.den;return s(e)&&s(n)?this.toSmallExact().add(t.toSmallExact()):new u(e,n)}throw new Error(`Cannot add ${this} and ${t}`)}subtract(t){if(t instanceof n)return this.toInexact().add(t);if(t instanceof a)return this.add(t.toBigExact());if(t instanceof u){let e=this.num*t.den-t.num*this.den,n=this.den*t.den;return s(e)&&s(n)?this.toSmallExact().subtract(t.toSmallExact()):new u(e,n)}throw new Error(`Cannot subtract ${this} and ${t}`)}multiply(t){if(t instanceof n)return this.toInexact().add(t);if(t instanceof a)return this.add(t.toBigExact());if(t instanceof u){let e=this.num*t.num,n=this.den*t.den;return s(e)&&s(n)?this.toSmallExact().multiply(t.toSmallExact()):new u(e,n)}throw new Error(`Cannot multiply ${this} and ${t}`)}divide(t){if(t instanceof n)return this.toInexact().add(t);if(t instanceof a)return this.add(t.toBigExact());if(t instanceof u){let e=this.num*t.den,n=this.den*t.num;return s(e)&&s(n)?this.toSmallExact().divide(t.toSmallExact()):new u(e,n)}throw new Error(`Cannot divide ${this} and ${t}`)}numerator(){return new u(this.num)}denominator(){return new u(this.den)}integerSqrt(){return this.sqrt().floor()}sqrt(){return this.toSmallExact().sqrt()}abs(){return this.isNegative()?new u(-1n*this.num,this.den):this}floor(){return 1n===this.den?this:new u(this.num/this.den)}ceiling(){return 1n===this.den?this:new u(this.num/this.den+1n)}round(){if(1n===this.den)return this;{let t=this.floor(),e=this.subtract(t),n=this.ceiling();return n.subtract(this).greaterThan(e)?n:t}}log(){return this.toSmallExact().log()}expt(t){if((t=t.toInexact()).isInteger()){let e=t.num,n=this;for(let t=1;t<e;t++)n=n.multiply(this);return n}return this.toSmallExact().expt(t)}exp(){return this.toSmallExact().exp()}angle(){return new u(0n)}atan(){return this.toSmallExact().atan()}cos(){return this.toSmallExact().cos()}sin(){return this.toSmallExact().sin()}acos(){return this.toSmallExact().acos()}asin(){return this.toSmallExact().asin()}}const h=new a(0),o=new a(0),l=new a(1),m=new a(2),d=new a(-1),c=new n(Math.PI),f=new n(Number.POSITIVE_INFINITY),w=new n(Number.NEGATIVE_INFINITY),g=new n(Number.NaN);var E;!function(t){t[t.INTEGER=0]="INTEGER",t[t.RATIONAL=1]="RATIONAL",t[t.REAL=2]="REAL",t[t.COMPLEX=3]="COMPLEX"}(E||(E={}));class x{constructor(t,e){let n;this.real=t,this.imag=void 0===e?o:e,n=this.isInteger()?E.INTEGER:this.isRational()?E.RATIONAL:this.isReal()?E.REAL:E.COMPLEX,this.level=n}static makeInstance(e,i,r,s){if(void 0===r&&void 0!==s)throw new Error("Must specify both a numerator and denominator.");r="number"==typeof e?0:0n;let h,o,l=void 0!==i&&void 0!==s;if(!l&&(void 0!==i||void 0!==s))throw new Error("Real and imaginary part must be the same exactness.");if(h=l?t(e)&&t(r)&&t(i)&&t(s):t(e)&&t(r),o=l?typeof e==typeof r&&typeof i==typeof s&&typeof e==typeof i:typeof e==typeof r,!o)throw new TypeError("All makeInstance arguments must be the same type.");let m,d,c="bigint"==typeof e;if(l)if(h&&c)m=new u(e,i),d=new u(r,s);else{if(!h)throw new TypeError("Numerator and denominator must be integers.");m=new a(e,i),d=new a(r,s)}else h&&c?(m=new u(e),d=new u(r)):h?(m=new a(e),d=new a(r)):(m=new n(e),d=new n(r));return new x(m,d)}toString(){return this.isReal()?this.real.toString():this.real.toString()+this.imag.toSignedString()+"i"}liftTo(t){return this}isInteger(){return this.real.isInteger()&&this.imag.isInteger()}isRational(){return this.isFinite()}isFinite(){return this.real.isFinite()&&this.imag.isFinite()}isReal(){return this.imag.isZero()&&this.imag.isExact()}isComplex(){return!0}isExact(){return this.real.isExact()&&this.imag.isExact()}isInexact(){return!this.isExact()}isPositive(){if(!this.isReal())throw new TypeError("Not defined for complex numbers.");return this.real.isPositive()}toExact(){return new x(this.real.toExact(),this.imag.toExact())}toFixnum(){if(!this.isReal())throw new TypeError("Not defined for complex numbers.");return this.real.toFixnum()}greaterThan(t){if(!this.isReal()||!t.isReal())throw new Error("Greater than not defined for complex numbers.");return this.real.greaterThan(t.real)}greaterThanOrEqual(t){if(!this.isReal()||!t.isReal())throw new Error("Greater than or equal not defined for complex numbers.");return this.real.greaterThanOrEqual(t.real)}lessThan(t){if(!this.isReal()||!t.isReal())throw new Error("Less than not defined for complex numbers.");return this.real.lessThan(t.real)}lessThanOrEqual(t){if(!this.isReal()||!t.isReal())throw new Error("Less than or equal not defined for complex numbers.");return this.real.lessThanOrEqual(t.real)}equals(t){return this.real.equals(t.real)&&this.imag.equals(t.imag)}add(t){return new x(this.real.add(t.real),this.imag.add(t.imag))}subtract(t){return new x(this.real.subtract(t.real),this.imag.subtract(t.imag))}multiply(t){let e=this.real.multiply(t.real).subtract(this.imag.multiply(t.imag)),n=this.real.multiply(t.imag).add(this.imag.multiply(t.real));return new x(e,n)}divide(t){if(t.isReal()){let e=this.real.divide(t.real),n=this.imag.divide(t.real);return new x(e,n)}let e,n,i,r,s,a,u;if(this.isInexact()||t.isInexact())return e=this.real,n=this.imag,i=t.real,r=t.imag,r.abs().lessThanOrEqual(i.abs())?(s=r.divide(i),a=e.add(n.multiply(s)).divide(i.add(r.multiply(s))),u=n.subtract(e.multiply(s)).divide(i.add(r.multiply(s)))):(s=i.divide(r),a=e.multiply(s).add(n).divide(i.multiply(s).add(r)),u=n.multiply(s).subtract(e).divide(i.multiply(s).add(r))),new x(a,u);{var h=t.conjugate(),o=this.multiply(h),l=t.multiply(h).realPart();let e=o.realPart().divide(l).real,n=o.imaginaryPart().divide(l).real;return new x(e,n)}}numerator(){if(!this.isReal())throw new Error("Numerator not defined for complex numbers.");return new x(this.real.numerator())}denominator(){if(!this.isReal())throw new Error("Denominator not defined for complex numbers.");return new x(this.real.denominator())}integerSqrt(){if(this.isInteger())return new x(this.real.integerSqrt());throw new Error("IntegerSqrt only defined for integers.")}sqrt(){if(this.isReal())return new x(this.real.sqrt());let t=this.magnitude().real.add(this.real),e=t.divide(new a(2)).sqrt(),n=this.imag.divide(t.multiply(new a(2)).sqrt());return new x(e,n)}abs(){if(!this.isReal())throw new Error("abs is not defined for complex numbers.");return new x(this.real.abs())}floor(){if(!this.isReal())throw new Error("floor is not defined for complex numbers.");return new x(this.real.floor())}ceiling(){if(!this.isReal())throw new Error("ceiling is not defined for complex numbers.");return new x(this.real.ceiling())}round(){if(!this.isReal())throw new Error("round is not defined for complex numbers.");return new x(this.real.round())}conjugate(){return new x(this.real,new a(0).subtract(this.imag))}magnitude(){let t=this.real.multiply(this.real),e=this.imag.multiply(this.imag),n=t.add(e);return new x(n.sqrt())}realPart(){return new x(this.real)}imaginaryPart(){return new x(this.imag)}log(){let t=this.magnitude(),e=this.angle();return t.log().add(e.multiply(q))}expt(t){if(this.isExact()&&this.isInteger()&&t.greaterThanOrEqual(p)){let e,n=function(t,e){let n,i,r;if("number"==typeof t&&"number"==typeof e)n=0,i=1,r=2;else{if("bigint"!=typeof t||"bigint"!=typeof e)throw new TypeError("n and k types must match.");n=0n,i=1n,r=2n}let s=i;for(;;){if(e===n)return s;e%r===n?(t*=t,e/=r):(s*=t,e-=i)}}(this.real.toFixnum(),t.real.toFixnum());return e="number"==typeof n?new a(n):new u(n),new x(e)}return t.multiply(this.log()).exp()}exp(){let t=new x(this.real.exp()),e=new x(this.imag.cos()),n=new x(this.imag.sin());return t.multiply(e.add(n.multiply(q)))}angle(){if(this.isReal())return new x(this.real.angle());if(this.real.equals(o)){let t=N.divide(y);return this.imag.greaterThan(o)?t:t.multiply(T)}let t=this.imaginaryPart().abs().divide(this.realPart().abs()).atan();return this.realPart().greaterThan(p)?this.imaginaryPart().greaterThan(p)?t:t.multiply(T):this.imaginaryPart().greaterThan(p)?N.subtract(t):t.subtract(N)}atan(){return this.equals(q)||this.equals(v)?S:q.multiply(I.multiply(q.add(this).divide(q.add(p.subtract(this))).log()))}cos(){if(this.isReal())return new x(this.real.cos());let t=this.multiply(q),e=t.multiply(T);return t.exp().add(e.exp()).divide(y)}sin(){if(this.isReal())return new x(this.real.sin());let t=this.multiply(q),e=t.multiply(T),n=new x(o,m);return t.exp().subtract(e.exp()).divide(n)}acos(){if(this.isReal())return new x(this.real.acos());let t=N.divide(y),e=this.multiply(q),n=b.subtract(this.multiply(this)).sqrt(),i=e.add(n).log().multiply(q);return t.add(i)}asin(){if(this.isReal())return new x(this.real.asin());let t=b.subtract(this.multiply(this)).sqrt();return y.multiply(this.divide(b.add(t)).atan())}}const p=new x(o),b=new x(l),y=new x(m),I=b.divide(y),T=new x(d),q=new x(o,l),v=new x(o,d),N=new x(c),S=(new x(f),new x(w)),M=(new x(g),new a(0)),R=new a(1),$=new a(2),B=new a(-1),O=new n(Math.PI),P=new n(Number.POSITIVE_INFINITY),F=new n(Number.NEGATIVE_INFINITY),A=new n(Number.NaN),C=(new x(M),new x(R)),_=new x($);C.divide(_),new x(B),new x(M,R),new x(M,B),new x(O),new x(P),new x(F),new x(A)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,