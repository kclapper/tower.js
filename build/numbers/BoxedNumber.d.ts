import { Value } from './Value';
import { JSInteger, JSNumber, Level } from './main';
export declare class BoxedNumber {
    readonly level: Level;
    readonly real: Value;
    readonly imag: Value;
    constructor(real: Value, imag?: Value);
    static makeInstance(real: JSNumber): BoxedNumber;
    static makeInstance(real: bigint, imag: bigint): BoxedNumber;
    static makeInstance(real: bigint, realDen: bigint): BoxedNumber;
    static makeInstance(real: bigint, realDen: bigint, imag: bigint, imagDen: bigint): BoxedNumber;
    static makeInstance(real: number, imag: number): BoxedNumber;
    static makeInstance(real: number, realDen: number): BoxedNumber;
    static makeInstance(real: number, realDen: number, imag: number, imagDen: number): BoxedNumber;
    toString(): string;
    liftTo(other: BoxedNumber): BoxedNumber;
    isInteger(): boolean;
    isRational(): boolean;
    isFinite(): boolean;
    isReal(): boolean;
    isComplex(): boolean;
    isExact(): boolean;
    isInexact(): boolean;
    isPositive(): boolean;
    toExact(): BoxedNumber;
    toFixnum(): JSInteger;
    greaterThan(other: BoxedNumber): boolean;
    greaterThanOrEqual(other: BoxedNumber): boolean;
    lessThan(other: BoxedNumber): boolean;
    lessThanOrEqual(other: BoxedNumber): boolean;
    equals(other: BoxedNumber): boolean;
    add(other: BoxedNumber): BoxedNumber;
    subtract(other: BoxedNumber): BoxedNumber;
    multiply(other: BoxedNumber): BoxedNumber;
    divide(other: BoxedNumber): BoxedNumber;
    numerator(): BoxedNumber;
    denominator(): BoxedNumber;
    integerSqrt(): BoxedNumber;
    sqrt(): BoxedNumber;
    abs(): BoxedNumber;
    floor(): BoxedNumber;
    ceiling(): BoxedNumber;
    round(): BoxedNumber;
    conjugate(): BoxedNumber;
    magnitude(): BoxedNumber;
    realPart(): BoxedNumber;
    imaginaryPart(): BoxedNumber;
    log(): BoxedNumber;
    expt(power: BoxedNumber): BoxedNumber;
    exp(): BoxedNumber;
    angle(): BoxedNumber;
    atan(): BoxedNumber;
    cos(): BoxedNumber;
    sin(): BoxedNumber;
    acos(): BoxedNumber;
    asin(): BoxedNumber;
}
export declare const ZERO: BoxedNumber;
export declare const ONE: BoxedNumber;
export declare const TWO: BoxedNumber;
export declare const HALF: BoxedNumber;
export declare const NEG_ONE: BoxedNumber;
export declare const I: BoxedNumber;
export declare const NEG_I: BoxedNumber;
export declare const PI: BoxedNumber;
export declare const INF: BoxedNumber;
export declare const NEG_INF: BoxedNumber;
export declare const NAN: BoxedNumber;
