import { JSInteger } from "./main";
export type Value = ExactNumber | InexactNumber;
declare abstract class AbstractNumber {
    abstract isFinite(): boolean;
    abstract isInexact(): boolean;
    abstract isExact(): boolean;
    abstract isInteger(): boolean;
    abstract toInexact(): InexactNumber;
    abstract toExact(): ExactNumber;
    abstract toFixnum(): JSInteger;
    abstract toString(): string;
    abstract toSignedString(): string;
    abstract greaterThan(other: Value): boolean;
    abstract greaterThanOrEqual(other: Value): boolean;
    abstract lessThan(other: Value): boolean;
    abstract lessThanOrEqual(other: Value): boolean;
    abstract equals(other: Value): boolean;
    abstract isZero(): boolean;
    abstract isPositive(): boolean;
    abstract isNegative(): boolean;
    abstract add(other: Value): Value;
    abstract subtract(other: Value): Value;
    abstract multiply(other: Value): Value;
    abstract divide(other: Value): Value;
    abstract numerator(): Value;
    abstract denominator(): Value;
    abstract integerSqrt(): Value;
    abstract sqrt(): Value;
    abstract abs(): Value;
    abstract floor(): Value;
    abstract ceiling(): Value;
    abstract round(): Value;
    abstract log(): Value;
    abstract expt(power: Value): Value;
    abstract exp(): Value;
    abstract angle(): Value;
    abstract atan(): Value;
    abstract cos(): Value;
    abstract sin(): Value;
    abstract acos(): Value;
    abstract asin(): Value;
}
export declare class InexactNumber extends AbstractNumber {
    num: number;
    constructor(num: number);
    isFinite(): boolean;
    isInexact(): boolean;
    isExact(): boolean;
    isInteger(): boolean;
    toInexact(): InexactNumber;
    toExact(): ExactNumber;
    toFixnum(): JSInteger;
    toString(): string;
    toSignedString(): string;
    greaterThan(other: Value): boolean;
    greaterThanOrEqual(other: Value): boolean;
    lessThan(other: Value): boolean;
    lessThanOrEqual(other: Value): boolean;
    equals(other: Value): boolean;
    isZero(): boolean;
    isPositive(): boolean;
    isNegative(): boolean;
    add(other: Value): Value;
    subtract(other: Value): Value;
    multiply(other: Value): Value;
    divide(other: Value): Value;
    numerator(): Value;
    denominator(): Value;
    integerSqrt(): Value;
    sqrt(): Value;
    abs(): Value;
    floor(): Value;
    ceiling(): Value;
    round(): Value;
    log(): Value;
    expt(power: Value): Value;
    exp(): Value;
    angle(): Value;
    atan(): Value;
    cos(): Value;
    sin(): Value;
    acos(): Value;
    asin(): Value;
}
export declare abstract class ExactNumber extends AbstractNumber {
    abstract readonly num: JSInteger;
    abstract readonly den: JSInteger;
    static makeInstance(num: number, den: number): ExactNumber;
    static makeInstance(num: bigint, den: bigint): ExactNumber;
}
export declare class SmallExactNumber extends ExactNumber {
    readonly num: number;
    readonly den: number;
    constructor(num: number, den?: number);
    private gcd;
    isFinite(): boolean;
    isInexact(): boolean;
    isExact(): boolean;
    isInteger(): boolean;
    toInexact(): InexactNumber;
    toExact(): ExactNumber;
    toBigExact(): BigExactNumber;
    toFixnum(): JSInteger;
    toString(): string;
    toSignedString(): string;
    greaterThan(other: Value): boolean;
    greaterThanOrEqual(other: Value): boolean;
    lessThan(other: Value): boolean;
    lessThanOrEqual(other: Value): boolean;
    equals(other: Value): boolean;
    isZero(): boolean;
    isPositive(): boolean;
    isNegative(): boolean;
    add(other: Value): Value;
    subtract(other: Value): Value;
    multiply(other: Value): Value;
    divide(other: Value): Value;
    numerator(): Value;
    denominator(): Value;
    integerSqrt(): Value;
    sqrt(): Value;
    abs(): Value;
    floor(): Value;
    ceiling(): Value;
    round(): Value;
    log(): Value;
    expt(power: Value): Value;
    exp(): Value;
    angle(): Value;
    atan(): Value;
    cos(): Value;
    sin(): Value;
    acos(): Value;
    asin(): Value;
}
export declare class BigExactNumber extends ExactNumber {
    readonly num: bigint;
    readonly den: bigint;
    constructor(num: bigint, den?: bigint);
    private gcd;
    private bigintAbs;
    isFinite(): boolean;
    isInexact(): boolean;
    isExact(): boolean;
    isInteger(): boolean;
    toInexact(): InexactNumber;
    toExact(): ExactNumber;
    toSmallExact(): SmallExactNumber;
    toFixnum(): JSInteger;
    toString(): string;
    toSignedString(): string;
    greaterThan(other: Value): boolean;
    greaterThanOrEqual(other: Value): boolean;
    lessThan(other: Value): boolean;
    lessThanOrEqual(other: Value): boolean;
    equals(other: Value): boolean;
    isZero(): boolean;
    isPositive(): boolean;
    isNegative(): boolean;
    add(other: Value): Value;
    subtract(other: Value): Value;
    multiply(other: Value): Value;
    divide(other: Value): Value;
    numerator(): Value;
    denominator(): Value;
    integerSqrt(): Value;
    sqrt(): Value;
    abs(): Value;
    floor(): Value;
    ceiling(): Value;
    round(): Value;
    log(): Value;
    expt(power: Value): Value;
    exp(): Value;
    angle(): Value;
    atan(): Value;
    cos(): Value;
    sin(): Value;
    acos(): Value;
    asin(): Value;
}
export declare const ZERO_VAL: SmallExactNumber;
export declare const ONE_VAL: SmallExactNumber;
export declare const TWO_VAL: SmallExactNumber;
export declare const NEG_ONE_VAL: SmallExactNumber;
export declare const PI_VAL: InexactNumber;
export declare const INF_VAL: InexactNumber;
export declare const NEG_INF_VAL: InexactNumber;
export declare const NAN_VAL: InexactNumber;
export {};
